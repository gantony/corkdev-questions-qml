/**
 * Simple API to gather and rank questions during talks
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: antony.guinard@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGPublicApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGPublicApi::SWGPublicApi() {}

SWGPublicApi::~SWGPublicApi() {}

SWGPublicApi::SWGPublicApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGPublicApi::addQuestion(SWGQuestion question) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/questions");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = question.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPublicApi::addQuestionCallback);

    worker->execute(&input);
}

void
SWGPublicApi::addQuestionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGQuestion* output = static_cast<SWGQuestion*>(create(json, QString("SWGQuestion")));
    

    worker->deleteLater();

    emit addQuestionSignal(output);
    
}
void
SWGPublicApi::listQuestions() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/questions");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPublicApi::listQuestionsCallback);

    worker->execute(&input);
}

void
SWGPublicApi::listQuestionsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGQuestion*>* output = new QList<SWGQuestion*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGQuestion* o = new SWGQuestion();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit listQuestionsSignal(output);
    
}
void
SWGPublicApi::upvote(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/questions/{id}/votes");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPublicApi::upvoteCallback);

    worker->execute(&input);
}

void
SWGPublicApi::upvoteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    
    qint64 output;  // TODO add primitive output support
        

    worker->deleteLater();

    emit upvoteSignal(output);
    
}
} /* namespace Swagger */
